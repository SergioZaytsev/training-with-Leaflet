"use strict";

const form = document.querySelector(".form");
const containerWorkouts = document.querySelector(".workouts");
const inputType = document.querySelector(".form__input--type");
const inputDistance = document.querySelector(".form__input--distance");
const inputDuration = document.querySelector(".form__input--duration");
const inputCadence = document.querySelector(".form__input--cadence");
const inputElevation = document.querySelector(".form__input--elevation");
//const workout = document.querySelector(".workouts");

const typeWorking = {
    run: "–ü—Ä–æ–±–µ–∂–∫–∞",
    cycling: "–í–µ–ª–æ—Å–∏–ø–µ–¥",
};

// –æ–±—â–∏–π –∫–ª–∞—Å—Å –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
class Workoout {
    date = new Date();
    id = (Date.now() + "").slice(-10);
    constructor(duration, distance, coord) {
        this.duration = duration;
        this.distance = distance;
        this.coord = coord;
    }
    // –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–µ—Ç –º–µ—Å—è—Ü–∞ –∏ —É –æ–±—ä–µ–∫—Ç–∞ —Å–æ–∑–¥–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é Disription –≤ –∫–æ—Ç–æ—Ä–æ–π —Å–æ–¥–µ—Ä–∂–∞—Ç—å—Å—è —Å–≤–µ–¥–µ–Ω–∏—è –æ —Å—Ç—Ä–æ–∫–µ —Å –Ω–∞—á–∞–ª–æ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏ –≤—ã–∑—ã–≤–µ—Ç—Å—è —É–∂–µ –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ä–µ–Ω–Ω–æ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –¥–∂–∞–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞
    _distription() {
        const months = [
            "–Ø–Ω–≤–∞—Ä—è",
            "–§–µ–≤—Ä–∞–ª—è",
            "–ú–∞—Ä—Ç–∞",
            "–ê–ø—Ä–µ–ª—è",
            "–ú–∞—è",
            "–ò—é–Ω—è",
            "–ò—é–ª—è",
            "–ê–≤–≥—É—Å—Ç–∞",
            "–°–µ–Ω—Ç—è–±—Ä—è",
            "–û–∫—Ç—è–±—Ä—è",
            "–ù–æ—è–±—Ä—è",
            "–î–µ–∫–∞–±—Ä—è",
        ];
        // –ø–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –∏ –º–µ—Å—è—Ü
        const day = this.date.getDate();
        const month = months[this.date.getMonth()];
        this.disription = `${this.type === typeWorking.cycling ? "üö¥‚Äç‚ôÄÔ∏è" : "üèÉ‚Äç‚ôÇÔ∏è"} ${this.type} ${day} ${month} `;
    }
}

//–ü–æ–¥–≤–∏–¥ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ - –±–µ–≥
class Running extends Workoout {
    type = typeWorking.run;
    constructor(duration, distance, coord, temp) {
        super(duration, distance, coord);
        this.temp = temp;
        this.createRunning();
        this._distription();
        this.calcPace();
    }
    createRunning() {
        console.log("–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –±–µ–≥–∞ —Å–æ–∑–¥–∞–¥–∞—Å—å!");
    }
    calcPace() {
        this.pace = (this.duration / this.distance).toFixed(2);
        return this.pace;
    }
}

//–ü–æ–¥–ø–∏–≤–¥ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ - –í–µ–ª–æ—Å–∏–ø–µ–¥
class Cycling extends Workoout {
    type = typeWorking.cycling;
    constructor(duration, distance, coord, entrance) {
        super(duration, distance, coord);
        this.entrance = entrance;
        this.createCycling();
        this._distription();
        this.calcSpeed();
    }
    createCycling() {
        console.log("–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –≤–µ–ª–æ—Å–∏–ø–µ–¥–∞ —Å–æ–∑–¥–∞–¥–∞—Å—å!");
    }
    calcSpeed() {
        this.speed = (this.distance / (this.duration / 60)).toFixed(2);
        return this.speed;
    }
}

// –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
class App {
    // –¥–µ—Ä–∂–∏—Ç –≤ —Å–µ–±–µ –º–∞—Å—Å–∏–≤ –≤—Å–µ—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
    _workout = [];
    //—Å–æ–¥–µ—Ä–∂–∏—Ç –æ–±—ä–µ–∫—Ç –∫–∞—Ä—Ç—ã
    _map;
    //–¥–∞–Ω–Ω—ã–µ –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –º–µ—Å—Ç–µ –∫—É–¥–∞  –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∫–∞–∑–∞–ª –Ω–∞ –∫–∞—Ä—Ç–µ
    _marker;

    //—Ñ–ª–∞–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–ª–∏–∫–æ–≤ –ø–æ –∫–∞—Ä—Ç–µ
    _flagNewWorking = false;
    constructor() {
        this._chekNavigator();
        form.addEventListener("submit", this._formSubmit.bind(this));
        inputType.addEventListener("change", this._changeSelect.bind(this));
        containerWorkouts.addEventListener("click", this._workoutClick.bind(this));
        this._localStorageRead();
    }

    // –∫–ª–∏–∫  –ø–æ —ç–µ–ª–µ–º–µ–Ω—Ç—É Workout
    _workoutClick(element) {
        const elementCick = element.target;
        if (!elementCick.closest(".workout")) return;
        // –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –º–µ—Å—Ç–∞ –∫–ª–∏–∫–∞ (–ø–æ–ª—É—á–∞–µ–º id —Ä–æ–¥–∏—Ç–µ–ª—è)
        const id = element.target.closest(".workout").dataset.id;
        const work = this._workout.find((e) => e.id === id);

        if (elementCick.matches("button")) {
            // console.log("containerWorkouts");
            if (work) {
                this._delWorkout(work);
            }
        } else {
            this._map.setView(work.coord, 14, { animate: true, duration: 1 });
        }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –Ω–∞–≤–∏–≥–∞—Ç–æ—Ä–∞
    _chekNavigator() {
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(this._addPositionMap.bind(this), this._errorMap);
        }
    }

    // —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∞ –∫–∞—Ä—Ç—ã —Å –Ω–∞—à–µ–π –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π
    _addPositionMap(position) {
        // console.log("–∑–∞–ø—É—â–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è positionMap OK", position);
        const { latitude, longitude } = position.coords;
        const coord = [latitude, longitude];

        // –≤—Å—Ç–∞–≤–∏–ª–∏ –∫–∞—Ä—Ç—É —Å–æ —Å—Ç–æ—Ä–æ–Ω–Ω–µ–≥–æ API
        this._map = L.map("map").setView(coord, 14);
        //console.log("!!!!!!!!!!", this._map);
        L.tileLayer("https://tile.openstreetmap.org/{z}/{x}/{y}.png", {
            maxZoom: 19,
            attribution: '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>',
        }).addTo(this._map);

        // –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏–∏ _showform –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –∫–∞—Ä—Ç—É
        this._map.on("click", this._showForm.bind(this));

        // —Ä–µ–Ω–¥–µ—Ä–∏–º –≤—Å–µ—Ö –º–∞—Ä–∫–µ—Ä–æ–≤
        this.showMarkerforLocalSorage(this._workout);
    }

    //–≤—Å–µ –º–∞—Ä–∫—Ä–µ—Ä—ã –∏–∑ –º–∞—Å—Å–∏–≤–∞ (–∏–∑ –ø–∞–º—è—Ç–∏ –ª–æ–∫–∞–ª —Å—Ç–æ—Ä–∞–¥–∂) –∏ –≤—ã–≤–æ–¥–∏–º –∏—Ö –Ω–∞ –∫–∞—Ä—Ç—É
    showMarkerforLocalSorage(works) {
        works.forEach((work) => {
            // console.log("—Ä–µ–Ω–¥–µ—Ä", work);
            const { lat, lng } = work.coord;
            this._marker = L.marker([lat, lng]);
            this.renderMarker(work);
        });
    }

    //–§—É–Ω–∫—Ü–∏—è –æ—Ç–æ—Ä–∞–∂–∞—é—â–∞—è —ç–µ–ª–µ–º–µ–Ω—Ç—ã —Ñ–æ—Ä–º—ã –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –∫–∞—Ä—Ç—É
    _showForm(e) {
        if (this._flagNewWorking) return;
        const { lat, lng } = e.latlng;

        form.classList.remove("hidden");
        inputDistance.focus();
        this._marker = L.marker([lat, lng]);
        this._marker
            .addTo(this._map)
            .bindPopup(`New`, {
                className: "mark-popup",
                closeOnClick: false,
                autoClose: false,
            })
            .openPopup();
        this._flagNewWorking = true;
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç—ã –Ω–∞ —Å–∞–π—Ç
    _errorMap() {
        console.log("–ü–æ–∑–∏—Ü–∏—è –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ —Å—Ä–∞–±–æ—Ç–∞–ª–∞ –æ—à–∏–±–∫–∞");
    }

    // —É–¥–∞–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏

    _delWorkout(currWork) {
        // –¥–æ–±–∞–≤–∏—Ç—å –æ–±—ä–µ–∫—Ç –≤ –º–∞—Å—Å–∏–≤ workout

        this._workout = this._workout.filter((elem) => elem.id != currWork.id);
        // this._renderWorkout(currWork);

        //–†–µ–Ω–¥–µ–Ω—Ä –º–∞—Ä–∫–µ—Ä–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –Ω–∞ –∫–∞—Ä—Ç–µ
        // this.renderMarker(currWork);

        //–æ—á–∏—Å—Ç–∫–∞ —Ñ–æ—Ä–º –≤–≤–æ–¥–∞
        // hideForm();

        //–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω—ã—Ö –≤ –õ–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–µ–ª–∏—â–µ
        this._localStorageSave(this._workout);
        // this._localStorageRead();
        location.reload();
        this._flagNewWorking = false;
    }

    // –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
    _formSubmit(e) {
        let currWork;
        e.preventDefault();

        //–ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –Ω–∞ —á–∏—Å–ª–∞
        function checkNumberInputs(...el) {
            const res = el.every((e) => Number.isInteger(e));

            return res;
        }
        //—Ñ—É–Ω–∫—Ü–∏—è –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –Ω–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ —á–∏—Å–ª–∞
        function checkPositiveInputs(...el) {
            const res = el.every((e) => e > 0);
            //console.log("–ø–æ–∑–∏—Ç–∏–≤–Ω—ã–µ —á–∏—Å–ª–∞? ", res);
            return res;
        }
        const hideForm = function () {
            inputDistance.value = inputDuration.value = inputCadence.value = inputElevation.value = "";
            form.classList.add("hidden");
        };
        //–î–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–æ—Ä–º
        const type = inputType.value;
        const duration = +inputDuration.value;
        const distance = +inputDistance.value;

        // console.log(typeWorking.run);
        // –µ—Å–ª–∏ –ø—Ä–æ–±–µ–∂–∫–∞ —Å–æ–∑–¥–∞—Ç—å –æ–±—ä–µ–∫—Ç –ø—Ä–æ–±–µ–∂–∫–∞
        if (type === typeWorking.run) {
            const temp = +inputCadence.value;

            if (
                !checkNumberInputs(duration, distance, temp) ||
                !checkPositiveInputs(duration, distance, temp)
            ) {
                alert("–í—ã –≤–≤–µ–ª–∏ –Ω–µ —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–ª–∏ –í–∞—à–∏ —á–∏—Å–ª–∞ —Ä–∞–≤–Ω—ã 0");
                return;
            }

            currWork = new Running(duration, distance, this._marker._latlng, temp);
        }

        // –µ—Å–ª–∏ –≤–µ–ª–æ–ø—Å–∏–ø–µ–¥ —Å–æ–∑–¥–∞—Ç—å –æ–±—ä–µ–∫—Ç –≤–µ–ª–æ—Å–∏–ø–µ–¥
        if (type === typeWorking.cycling) {
            const elevaltion = +inputElevation.value;
            if (
                !checkNumberInputs(duration, distance, elevaltion) ||
                !checkPositiveInputs(duration, distance)
            ) {
                alert("–í—ã –≤–≤–µ–ª–∏ –Ω–µ —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–ª–∏ –í–∞—à–∏ —á–∏—Å–ª–∞ —Ä–∞–≤–Ω—ã 0");
                return;
            }
            // prettier-ignore
            currWork = new Cycling(duration,distance,this._marker._latlng,elevaltion);
        }
        // –¥–æ–±–∞–≤–∏—Ç—å –æ–±—ä–µ–∫—Ç –≤ –º–∞—Å—Å–∏–≤ workout

        this._workout.push(currWork);
        this._renderWorkout(currWork);

        //–†–µ–Ω–¥–µ–Ω—Ä –º–∞—Ä–∫–µ—Ä–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –Ω–∞ –∫–∞—Ä—Ç–µ
        this.renderMarker(currWork);

        //–æ—á–∏—Å—Ç–∫–∞ —Ñ–æ—Ä–º –≤–≤–æ–¥–∞
        hideForm();

        //–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω—ã—Ö –≤ –õ–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–µ–ª–∏—â–µ
        this._localStorageSave(this._workout);
        this._flagNewWorking = false;
    }
    _isValidNumber(...inputs) {
        crossOriginIsolated.log(inputs);
        inputs.some((e) => Number.isFinite(e));
    }

    // –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∫–ª—é—á–∞—é—â–∞—è —Ç–∏–ø —Ö–æ–¥—å–±—ã –∏–ª–∏ –≤–µ–ª–æ—Å–∏–ø–µ–¥–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∏ –≤—ã–±–æ—Ä–∞ –º–µ–Ω—é –≤ –≤—ã–ø–∞–¥–∞—é—â–µ–º —Å–ø–∏—Å–∫–µ
    _changeSelect(e) {
        e.preventDefault();

        inputCadence.closest(".form__row").classList.toggle("form__row--hidden");
        inputElevation.closest(".form__row").classList.toggle("form__row--hidden");
    }

    // renderMarkerToClickMap() {}

    // —Å—Ç–∞–≤–∏–º –º–∞—Ä–∫–µ—Ä –Ω–∞  —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    renderMarker(work) {
        this._marker
            .addTo(this._map)
            .bindPopup(`${work.disription}`, {
                className: "mark-popup",
                closeOnClick: false,
                autoClose: false,
            })
            .openPopup();
    }
    _renderWorkout(workout) {
        const type = workout.type[0].toLowerCase() + workout.type.slice(1);

        const icon = type.toLowerCase() === typeWorking.cycling.toLocaleLowerCase() ? "üö¥‚Äç‚ôÄÔ∏è" : "üèÉ‚Äç‚ôÇÔ∏è";
        let html = `<li class="workout workout" data-id="${workout.id}">
    <h2 class="workout__title">${workout.disription} <button data-btn = 'del' >—É–¥–∞–ª–∏—Ç—å</button></h2>    
         
    
    
    <div class="workout__details">
      <span class="workout__icon">${icon}</span>
      <span class="workout__value">${workout.distance}</span>
      <span class="workout__unit">–∫–º</span>
      
    </div>`;

        if (type.toLowerCase() === typeWorking.cycling.toLocaleLowerCase()) {
            html += `<div class="workout__details">
  <span class="workout__icon">‚è±</span>
  <span class="workout__value">${workout.duration}</span>
  <span class="workout__unit">–º–∏–Ω</span>
</div>
<div class="workout__details">
  <span class="workout__icon">‚ö°Ô∏è</span>
  <span class="workout__value">${workout.speed}</span>
  <span class="workout__unit">–∫–º/—á–∞—Å</span>
</div>
<div class="workout__details">
  <span class="workout__icon">‚õ∞</span>
  <span class="workout__value">${workout.entrance}</span>
  <span class="workout__unit">–º</span>
</div>
</li>`;
        } else {
            html += `<div class="workout__details">
      <span class="workout__icon">‚è±</span>
      <span class="workout__value">${workout.duration}</span>
      <span class="workout__unit">–º–∏–Ω</span>
    </div>
    <div class="workout__details">
      <span class="workout__icon">‚ö°Ô∏è</span>
      <span class="workout__value">${workout.pace}</span>
      <span class="workout__unit">–º–∏–Ω/–∫–º</span>
    </div>
    <div class="workout__details">
      <span class="workout__icon">ü¶∂üèº</span>
      <span class="workout__value">${workout.temp}</span>
      <span class="workout__unit">—à–∞–≥</span>
    </div>
  </li>`;
        }

        form.insertAdjacentHTML("afterend", html);

        // const element = containerWorkouts?.querySelector(`[data-id='${workout.id}']`);
        console.log(containerWorkouts);
        // if (!element) return;
        // const buttonEl = element.target.querySelector("[data-btn='del']");

        // console.log(buttonEl);
        // if (!buttonEl) return;

        // buttonEl.addEventListener("click", () => {
        //     console.log("click");
        // });
    }

    //–ë–ª–æ–∫ —Ä–∞–±–æ—Ç—ã —Å –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ö—Ä–∞–Ω–∏–ª–∏–µ–º
    _localStorageSave(workout) {
        localStorage.setItem("workout", JSON.stringify(workout));
    }

    _localStorageRead() {
        if (!localStorage.length) return;
        this._workout = JSON.parse(localStorage.getItem("workout"));

        this._workout.forEach((work) => {
            this._renderWorkout(work);
        });
    }
}

const app = new App();
